;; -*-lisp-*-
;;
;; Here is a sample .stumpwmrc file

(in-package :stumpwm)

;; Change appearance.
(setq *message-window-gravity* :top
      *message-window-padding 2
      *input-window-gravity* :top
      *window-border-style* :tight
      *normal-border-width* 2)

;; Message bar and window decorations
(set-msg-border-width 2)
(set-font "-*-terminus-medium-r-*-*-16-*-*-*-*-*-*-1")
(set-fg-color "white")
(set-bg-color "black")
(set-border-color "purple")
(set-focus-color "purple")
(set-unfocus-color "black")

;; Modeline
(setf *screen-mode-line-format* "^[^2%n] | ^[^2%W^] ^> %d"
      *time-modeline-string* "%a %b %e %I:%M %P"
      *mode-line-foreground-color* "Gray75")

;; Other
(setf *mouse-focus-policy* :sloppy)

;; Load modules
(load "/home/jay/.stumpwm.d/modules/media/amixer/amixer.lisp")
(load "/home/jay/.stumpwm.d/modules/util/ttf-fonts/ttf-fonts.lisp")

;; change the prefix key to something else
(set-prefix-key (kbd "C-t"))

;; prompt the user for an interactive command. The first arg is an
;; optional initial contents.
(defcommand colon1 (&optional (initial "")) (:rest)
  (let ((cmd (read-one-line (current-screen) ": " :initial-input initial)))
    (when cmd
      (eval-command cmd t))))

;; Use multimedia controls for Spotify and volume
(define-key *top-map* (kbd "XF86AudioPlay") "exec /home/jay/.local/bin/spotify-ctrl toggle")
(define-key *top-map* (kbd "XF86AudioStop") "exec /home/jay/.local/bin/spotify-ctrl stop")
(define-key *top-map* (kbd "XF86AudioNext") "exec /home/jay/.local/bin/spotify-ctrl next")
(define-key *top-map* (kbd "XF86AudioPrev") "exec /home/jay/.local/bin/spotify-ctrl previous")
(define-key *top-map* (kbd "XF86AudioLowerVolume") "amixer-Front-1-")
(define-key *top-map* (kbd "XF86AudioRaiseVolume") "amixer-Front-1+")
(define-key *top-map* (kbd "XF86AudioMute") "amixer-Master-toggle pulse")

;; Terminal emulator
(define-key *root-map* (kbd "c") "exec x-terminal-emulator")
(undefine-key *root-map* (kbd "C-c"))

;; Read some doc
(define-key *root-map* (kbd "d") "exec evince")
;; Browse somewhere
(define-key *root-map* (kbd "b") "colon1 exec x-www-browser http://www.")
;; Ssh somewhere
(define-key *root-map* (kbd "C-s") "colon1 exec x-terminal-emulator -e ssh ")
;; Lock screen
(define-key *root-map* (kbd "C-l") "exec slock")

;; Group creation and navigation
(define-key *root-map* (kbd "C-Right") "gnext")
(define-key *root-map* (kbd "C-Left") "gprev")

;; Web jump (works for Google and Imdb)
;; (defmacro make-web-jump (name prefix)
;;   `(defcommand ,(intern name) (search) ((:rest ,(concatenate 'string name " search: ")))
;; 	       (substitute #\+ #\Space search)
;; 	       (run-shell-command (concatenate 'string ,prefix search))))

;; (make-web-jump "google" "firefox http://www.google.fr/search?q=")
;; (make-web-jump "imdb" "firefox http://www.imdb.com/find?q=")

;; C-t M-s is a terrble binding, but you get the idea.
;; (define-key *root-map* (kbd "M-s") "google")

;; Message window font
;; (set-font "-xos4-terminus-medium-r-normal--16-*-*-*-c-80-iso8859-15")
(set-font (make-instance 'xft:font :family "Ubuntu Mono" :subfamily "Regular" :size 12))

;;; Define window placement policy.

;; Clear rules.
(clear-window-placement-rules)

;; Last rule to match takes precedence!
;; TIP: if the argument to :title or :role begins with an ellipsis, a substring
;; match is performed.
;; TIP: if the :create flag is set then a missing group will be created and
;; restored from *data-dir*/create file.
;; TIP: if the :restore flag is set then group dump is restored even for an
;; existing group using *data-dir*/restore file.
;; (define-frame-preference "Default"
;;   ;; frame raise lock (lock AND raise == jumpto)
;;   (0 t nil :class "Konqueror" :role "...konqueror-mainwindow")
;;   (1 t nil :class "XTerm"))

