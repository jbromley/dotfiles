#!/usr/bin/env bash
# Present a rofi menu that allows the user to lock the session, exit i3,
# suspend, reboot, or power off the machine. Requires systemctl. loginctl is
# used for locking, though another program can be configured.
set -Euo pipefail

# Use a custom lock script
LOCK_CMD="loginctl lock-session"

# Whether to ask for user's confirmation
enable_confirmation=false

usage="$(basename "$0") [-h] [-c] [-p name] -- display a menu for power off, reboot, lock etc.

where:
    -h  show this help text
    -c  ask for user confirmation"

# Parse CLI arguments
while getopts "hcp:" option; do
    case "${option}" in
    h)
        echo "${usage}"
        exit 0
        ;;
    c)
        enable_confirmation=true
        ;;
    *)
        exit 1
        ;;
    esac
done

# menu defined as an associative array
declare -a menu
declare -a cmds

# Menu with keys/commands
menu=("Lock" "Log out" "Suspend" "Reboot" "Power off")
cmds=("${LOCK_CMD}" "i3-msg exit" "systemctl suspend" "systemctl reboot" "systemctl poweroff")
menu_nrows=${#menu[@]}

# Menu entries that may trigger a confirmation message
menu_confirm="Power off Reboot Suspend"

launcher_options=(-dmenu -i -lines "${menu_nrows}")

launcher=(rofi "${launcher_options[@]}")
selection="$(printf '%s\n' "${menu[@]}" | "${launcher[@]}")"

function ask_confirmation() {
    local selection="$1"
    confirmed=$(echo -e "Yes\nNo" | rofi -dmenu -i -lines 2 -p "${selection}?")
    [ "${confirmed}" == "Yes" ] && return 0 || return 1
}

function get_index() {
    local value
    declare -a a
    value="$1"
    shift
    a=("$@")
    for i in "${!a[@]}"; do
        if [[ "${a[$i]}" = "${value}" ]]; then
            echo "${i}"
            break
        fi
    done
}

if [[ $? -eq 0 && -n ${selection} ]]; then
    cmdindex=$(get_index "${selection}" "${menu[@]}")
    if [[ "${enable_confirmation}" = true ]] && [[ ${menu_confirm} =~ $selection ]]; then
        if ask_confirmation "${selection}"; then
            echo i3-msg -q "exec ${cmds[${cmdindex}]}"
        fi
    else
        echo i3-msg -q "exec ${cmds[${cmdindex}]}"
    fi
fi
